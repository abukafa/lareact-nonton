# version: '3.8'

services:
  # --- Layanan Aplikasi Laravel (PHP-FPM) ---
  app:
    build:
      context: . # Konteks build adalah direktori saat ini (tempat Dockerfile berada)
      dockerfile: Dockerfile # Nama Dockerfile yang akan digunakan
    container_name: laravel-app
    restart: unless-stopped
    volumes:
      - .:/var/www/html # Mount direktori proyek lokal ke dalam kontainer. Ini KUNCI untuk development.
      - app_node_modules:/var/www/html/node_modules # Persistent volume untuk node_modules di dalam container
      - app_vendor:/var/www/html/vendor # Persistent volume untuk vendor di dalam container
    ports:
      - "9000:9000" # Port PHP-FPM
    environment:
      # Variabel lingkungan untuk aplikasi Laravel Anda
      # Sesuaikan dengan .env Anda. Ingat, DB_HOST akan menunjuk ke IP publik Niagahoster.
      APP_NAME: "${APP_NAME:-Laravel}"
      APP_ENV: "${APP_ENV:-local}"
      APP_KEY: "${APP_KEY}"
      APP_DEBUG: "${APP_DEBUG:-true}"
      APP_URL: "${APP_URL:-http://localhost}"
      LOG_CHANNEL: "${LOG_CHANNEL:-stack}"
      DB_CONNECTION: mysql
      DB_HOST: 156.67.222.1 # IP Publik Niagahoster
      DB_PORT: 3306
      DB_DATABASE: u957492887_cinema
      DB_USERNAME: u957492887_jazcinema
      DB_PASSWORD: Administrator*2023
      BROADCAST_DRIVER: log
      CACHE_DRIVER: file
      SESSION_DRIVER: file
      SESSION_LIFETIME: 120
      QUEUE_CONNECTION: sync
      REDIS_HOST: 127.0.0.1
      REDIS_PASSWORD: null
      REDIS_PORT: 6379
      MAIL_MAILER: log
      MAIL_HOST: smtp.mailgun.org
      MAIL_PORT: 587
      MAIL_USERNAME: null
      MAIL_PASSWORD: null
      MAIL_ENCRYPTION: tls
      MAIL_FROM_ADDRESS: hello@example.com
      MAIL_FROM_NAME: "${APP_NAME}"
      AWS_ACCESS_KEY_ID: ''
      AWS_SECRET_ACCESS_KEY: ''
      AWS_DEFAULT_REGION: us-east-1
      AWS_BUCKET: ''
      PUSHER_APP_ID: ''
      PUSHER_APP_KEY: ''
      PUSHER_APP_SECRET: ''
      PUSHER_APP_CLUSTER: mt1
      MIX_PUSHER_APP_KEY: "${PUSHER_APP_KEY}"
      MIX_PUSHER_APP_CLUSTER: "${PUSHER_APP_CLUSTER}"
    # depends_on:
    #   - nginx # Kontainer Nginx bergantung pada aplikasi PHP-FPM

  # --- Layanan Web Server Nginx ---
  nginx:
    image: nginx:alpine # Menggunakan image Nginx yang ringan
    container_name: laravel-nginx
    restart: unless-stopped
    ports:
      - "80:80" # Map port 80 host ke port 80 kontainer Nginx
    volumes:
      - .:/var/www/html # Mount direktori proyek yang sama ke Nginx
      - ./docker/nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro # Konfigurasi Nginx kustom
    depends_on:
      - app # Nginx bergantung pada layanan aplikasi PHP-FPM

  # --- Layanan Node.js (untuk Build Frontend Assets - Laravel Mix/Webpack) ---
  # Ini adalah kontainer terpisah yang hanya Anda gunakan saat perlu menjalankan `npm install` atau `npm run dev/prod`
  node:
    image: node:18-alpine # Sesuaikan versi Node.js yang Anda pakai
    container_name: laravel-node
    volumes:
      - .:/var/www/html # Mount direktori proyek lokal
      - app_node_modules:/var/www/html/node_modules # Persistent volume untuk node_modules
    working_dir: /var/www/html
    # Perintah entrypoint default di sini bisa diganti dengan bash untuk interaktif
    # entrypoint: ["/bin/sh"] # Untuk bisa masuk dengan `docker-compose exec node sh`
    tty: true # Penting untuk menjaga kontainer tetap berjalan jika Anda ingin exec masuk
    command: "tail -F /dev/null" # Perintah dummy agar kontainer tetap berjalan

volumes:
  app_node_modules: # Volume untuk node_modules
  app_vendor: # Volume untuk vendor
